{"version":3,"sources":["Components/Chart/Chart.module.css","Components/CountryPicker/CountryPicker.module.css","images/image.png","../node_modules/moment/src/lib/locale sync","Components/Cards/Cards.jsx","api/index.js","Components/Chart/Chart.jsx","Components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","Components/Cards/Cards.module.css","App.module.css"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","cards","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","console","log","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","borderColor","fill","CountryPicker","handleCountryChange","fetchedCountryies","setFetchedCountries","FormControl","NativeSelect","defaultValue","onChange","target","i","key","App","state","fetchedData","setState","fetcheddata","this","image","src","caronaImage","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3bb8ee5c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2bxln\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FormControl\":\"CountryPicker_FormControl__24Krj\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 147;","import React from 'react';\r\nimport {Card,CardContent,Typography,Grid} from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\nconst Cards = ({data:{confirmed,recovered,deaths,lastUpdate}})=>\r\n{\r\n    if(!confirmed)\r\n    {\r\n        return 'Loading...'\r\n    }\r\n    return (\r\n       <div className={styles.container}>\r\n         <Grid container spacing={3} justify=\"center\">\r\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.cards,styles.infected)}>\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                    <Typography variant='h5'><CountUp start={0} end={confirmed.value} duration={2.5} separator=',' /></Typography>\r\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.cards,styles.recovered)}>\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                    <Typography variant='h5'><CountUp start={0} end={recovered.value} duration={2.5} separator=',' /></Typography>\r\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.cards,styles.deaths)}>\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                    <Typography variant='h5'><CountUp start={0} end={deaths.value} duration={2.5} separator=',' /></Typography>\r\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n         </Grid>\r\n       </div>\r\n    );\r\n}\r\nexport default Cards;","import axios from 'axios';\r\nconst url = \"https://covid19.mathdro.id/api\";\r\nexport const fetchData = async(country)=>\r\n{\r\n  let changeableUrl = url;\r\n  if(country)\r\n  {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n   try{\r\n     const {data:{confirmed,recovered,deaths,lastUpdate}} = await axios.get(changeableUrl);\r\n    \r\n     return {confirmed,recovered,deaths,lastUpdate};\r\n   }\r\n   catch(error)\r\n   {\r\n\r\n   }\r\n}\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n      const {data} = await axios.get(`${url}/daily`);\r\n      const modifiedData = data.map((dailyData)=>({\r\n          confirmed: dailyData.confirmed.total,\r\n          deaths: dailyData.deaths.total,\r\n          date: dailyData.reportDate\r\n      }))\r\n      console.log('modified data')\r\n      console.log(modifiedData)\r\n      return modifiedData;\r\n    } catch (error) {\r\n      \r\n    }\r\n  };\r\n\r\nexport const fetchCountries = async()=>\r\n{\r\n  try{\r\n    const {data:{countries}} = await axios.get(`${url}/countries`);\r\n    console.log(countries);\r\n    return countries.map((country)=>country.name);\r\n  }\r\n  catch(error)\r\n  {\r\n\r\n  }\r\n}","import React,{useState,useEffect, Component} from 'react';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport { fetchDailyData } from '../../api';\r\n\r\nimport styles from './Chart.module.css';\r\nconst Chart = ({data,country})=>\r\n{\r\n   const [dailyData,setDailyData] = useState({});\r\n   useEffect(()=>{\r\n       const fetchAPI = async()=>\r\n       {\r\n           setDailyData(await fetchDailyData());\r\n       }\r\n       console.log(dailyData);\r\n       fetchAPI();\r\n   },[]);\r\n   const barChart = (\r\n     data.confirmed ? (\r\n       <Bar\r\n         data = {{\r\n            labels:['Infected','Recovered','Deaths'],\r\n            datasets:[{\r\n              label: 'People',\r\n              backgroundColor:['rgba(0,0,255,0.7)','rgba(0,255,0,0.7)','rgba(255,0,0,0.7)'],\r\n              data: [data.confirmed.value,data.recovered.value,data.deaths.value]\r\n            }]\r\n         }}\r\n         options = {{\r\n           legend: {display : false},\r\n           title: {display:true,text:`Current state in ${country}`}\r\n         }} \r\n       />\r\n     ) : null\r\n   );\r\n   const lineChart = (\r\n    dailyData[0] ? (\r\n      <Line\r\n        data={{\r\n          labels: dailyData.map(({ date }) => date),\r\n          datasets: [{\r\n            data: dailyData.map((data) => data.confirmed),\r\n            label: 'Infected',\r\n            borderColor: '#3333ff',\r\n            fill: true,\r\n          }, {\r\n            data: dailyData.map((data) => data.deaths),\r\n            label: 'Deaths',\r\n            borderColor: 'red',\r\n            backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n            fill: true,\r\n          },\r\n          ],\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n    return (\r\n       <div className={styles.container}>\r\n           {country?barChart:lineChart}\r\n       </div>\r\n    );\r\n}\r\nexport default Chart;","import React,{useState,useEffect} from 'react';\r\nimport {NativeSelect,FormControl} from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport {fetchCountries} from '../../api/index';\r\nconst CountryPicker = ({handleCountryChange})=>\r\n{\r\n    const [fetchedCountryies,setFetchedCountries] = useState([]);\r\n    useEffect(()=>\r\n    {\r\n        const fetchAPI = async()=>\r\n        {\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n        fetchAPI();\r\n    },[setFetchedCountries]);\r\n    console.log(fetchedCountryies);\r\n    return (\r\n       <FormControl className = {styles.FormControl}>\r\n           <NativeSelect defaultValue=\"\" onChange={(e)=> handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {\r\n                    fetchedCountryies.map((country,i)=><option key={i} value={country}>{country}</option>)\r\n                }\r\n           </NativeSelect>\r\n       </FormControl>\r\n    );\r\n}\r\nexport default CountryPicker;","import React from 'react';\r\nimport {Cards,Chart,CountryPicker} from './Components';\r\nimport styles from './App.module.css';\r\nimport {fetchData} from './api/index';\r\nimport caronaImage from './images/image.png';\r\nclass App extends React.Component\r\n{\r\n  state = {\r\n    data: {},\r\n    country:''\r\n  };\r\n  handleCountryChange = async(country)=>\r\n  {\r\n    const fetchedData = await fetchData(country);\r\n    this.setState({data:fetchedData,country:country}); \r\n    console.log(fetchedData);\r\n    console.log(country);\r\n  }\r\n  async componentDidMount()\r\n  {\r\n    const fetcheddata = await fetchData();\r\n    this.setState({data:fetcheddata});\r\n    console.log(\"nithin\");\r\n    console.log(fetcheddata);\r\n  }\r\n   render()\r\n   {\r\n      return(\r\n        <div className={styles.container}>\r\n          <img className={styles.image} src={caronaImage} alt=\"COVID-19\" />\r\n          <Cards data={this.state.data}/>\r\n          <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n          <Chart data={this.state.data} country={this.state.country}/>\r\n        </div>\r\n      );   \r\n   }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2XqFC\",\"cards\":\"Cards_cards__3ekAA\",\"infected\":\"Cards_infected__bZ078\",\"recovered\":\"Cards_recovered__1wTBM\",\"deaths\":\"Cards_deaths__1YvrA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};"],"sourceRoot":""}